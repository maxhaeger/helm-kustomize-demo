version: "3"

vars:
  ARGOCD_NAMESPACE: argocd

tasks:
  build:
    desc: "Create K3D cluster with LoadBalancer port mapping"
    cmds:
      - k3d cluster create --api-port 6550 -p "8080:80@loadbalancer" --agents 2
      - echo "Cluster created successfully"

  # ArgoCD Installation
  deploy-argocd:
    desc: "Deploy ArgoCD"
    cmds:
      - "kubectl create namespace {{.ARGOCD_NAMESPACE}} --dry-run=client -o yaml | kubectl apply -f -"
      - "kubectl apply -n {{.ARGOCD_NAMESPACE}} -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
      - echo "Waiting for ArgoCD deployment to be ready..."
      - "kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n {{.ARGOCD_NAMESPACE}}"
      - 'kubectl patch svc argocd-server -n {{.ARGOCD_NAMESPACE}} --type=merge --patch="{\"spec\":{\"type\":\"LoadBalancer\"}}"'

  # Direkte Deployments (OHNE ArgoCD) mit Kustomize
  deploy-dev:
    desc: "Deploy to Development environment (Helm + Kustomize)"
    cmds:
      - >
        helm upgrade --install nginx-demo-dev nginx-demo/
        --namespace dev
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/dev

  deploy-stage:
    desc: "Deploy to Staging environment (Helm + Kustomize)"
    cmds:
      - >
        helm upgrade --install nginx-demo-stage nginx-demo/
        --namespace stage
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/stage

  deploy-prod:
    desc: "Deploy to Production environment (Helm + Kustomize)"
    cmds:
      - >
        helm upgrade --install nginx-demo-prod nginx-demo/
        --namespace prod
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/prod

  # ArgoCD Application Deployments (NUR Applications, keine Workloads)
  deploy-argo-dev:
    desc: "Deploy Development ArgoCD Application"
    cmds:
      - >
        helm upgrade --install nginx-demo-dev-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-dev
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=dev
        --set argocd.syncPolicy.automated.prune=true
        --set argocd.syncPolicy.automated.selfHeal=true
      - echo "‚úÖ ArgoCD Application for DEV created"

  deploy-argo-stage:
    desc: "Deploy Staging ArgoCD Application"
    cmds:
      - >
        helm upgrade --install nginx-demo-stage-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-stage
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=stage
        --set argocd.syncPolicy.automated.prune=false
        --set argocd.syncPolicy.automated.selfHeal=true
      - echo "‚úÖ ArgoCD Application for STAGE created"

  deploy-argo-prod:
    desc: "Deploy Production ArgoCD Application"
    cmds:
      - >
        helm upgrade --install nginx-demo-prod-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-prod
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=prod
        --set argocd.syncPolicy.automated.prune=false
        --set argocd.syncPolicy.automated.selfHeal=false
      - echo "‚úÖ ArgoCD Application for PROD created"

  deploy-all-argo-apps:
    desc: "Deploy ArgoCD Applications for all environments"
    cmds:
      - task: deploy-argo-dev
      - task: deploy-argo-stage
      - task: deploy-argo-prod

  argo-status:
    desc: "Check all ArgoCD applications status"
    cmds:
      - echo "=== ArgoCD Applications ==="
      - kubectl get applications -n argocd -o wide

  sync-all:
    desc: "Sync all ArgoCD applications"
    cmds:
      - kubectl patch application nginx-demo-dev -n argocd --type=merge -p='{"operation":{"sync":{}}}'
      - kubectl patch application nginx-demo-stage -n argocd --type=merge -p='{"operation":{"sync":{}}}'
      - kubectl patch application nginx-demo-prod -n argocd --type=merge -p='{"operation":{"sync":{}}}'

  publish:
    desc: "Port-forward ArgoCD UI"
    cmds:
      - "kubectl port-forward svc/argocd-server -n {{.ARGOCD_NAMESPACE}} 8081:80"

  argo-secret-copy:
    desc: "Copy ArgoCD admin password to clipboard"
    cmds:
      - 'kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d | pbcopy'
      - echo "‚úÖ ArgoCD admin password copied to clipboard"

  # Monitoring Setup with Loki & Grafana
  setup-monitoring:
    desc: "Setup Helm repositories for monitoring"
    cmds:
      - helm repo add grafana https://grafana.github.io/helm-charts
      - helm repo add fluent https://fluent.github.io/helm-charts
      - helm repo update
      - echo "‚úÖ Monitoring repositories added"

  deploy-loki:
    desc: "Deploy Loki for log aggregation"
    deps: [setup-monitoring]
    cmds:
      - >
        helm upgrade --install loki grafana/loki
        --namespace logging
        --create-namespace
        --set deploymentMode=SingleBinary
        --set loki.useTestSchema=true
        --set loki.auth_enabled=false
        --set loki.commonConfig.replication_factor=1
        --set loki.storage.type=filesystem
        --set singleBinary.replicas=1
        --set backend.replicas=0
        --set read.replicas=0
        --set write.replicas=0
        --set ingester.replicas=0
        --set querier.replicas=0
        --set queryFrontend.replicas=0
        --set queryScheduler.replicas=0
        --set distributor.replicas=0
        --set compactor.replicas=0
        --set indexGateway.replicas=0
        --set bloomCompactor.replicas=0
        --set bloomGateway.replicas=0
        --set monitoring.selfMonitoring.enabled=false
        --set monitoring.selfMonitoring.grafanaAgent.installOperator=false
        --set test.enabled=false
      - echo "‚úÖ Loki deployed"

  deploy-grafana:
    desc: "Deploy Grafana with Loki datasource"
    deps: [deploy-loki]
    cmds:
      - >
        helm upgrade --install grafana grafana/grafana
        --namespace logging
        --set service.type=LoadBalancer
        --set service.port=3000
        --set adminPassword=admin123
        --set datasources."datasources\.yaml".apiVersion=1
        --set datasources."datasources\.yaml".datasources[0].name=Loki
        --set datasources."datasources\.yaml".datasources[0].type=loki
        --set datasources."datasources\.yaml".datasources[0].url=http://loki:3100
        --set datasources."datasources\.yaml".datasources[0].access=proxy
        --set datasources."datasources\.yaml".datasources[0].isDefault=true
        --set persistence.enabled=false
      - echo "‚úÖ Grafana deployed with admin/admin123 credentials"

  deploy-fluent-bit-loki:
    desc: "Deploy Fluent Bit configured for Loki"
    deps: [deploy-loki]
    cmds:
      - >
        helm upgrade --install fluent-bit fluent/fluent-bit
        --namespace logging
        --values fluent-bit-loki-values.yaml
      - echo "‚úÖ Fluent Bit deployed for Loki"

  monitoring:
    desc: "Deploy complete Loki + Grafana + Fluent Bit monitoring stack"
    cmds:
      - task: setup-monitoring
      - task: deploy-loki
      - task: deploy-grafana
      - task: deploy-fluent-bit-loki
      - echo ""

  monitoring-status:
    desc: "Check monitoring stack status"
    cmds:
      - echo "=== Loki Status ==="
      - kubectl get pods -l app.kubernetes.io/name=loki -n logging
      - echo ""
      - echo "=== Grafana Status ==="
      - kubectl get pods -l app.kubernetes.io/name=grafana -n logging
      - echo ""
      - echo "=== Fluent Bit Status ==="
      - kubectl get pods -l app.kubernetes.io/name=fluent-bit -n logging
      - echo ""
      - echo "=== Services ==="
      - kubectl get svc -n logging

  monitoring-logs:
    desc: "Show logs from monitoring components"
    cmds:
      - echo "=== Loki Logs ==="
      - kubectl logs -l app.kubernetes.io/name=loki -n logging --tail=20 || echo "No Loki logs"
      - echo ""
      - echo "=== Fluent Bit Logs ==="
      - kubectl logs -l app.kubernetes.io/name=fluent-bit -n logging --tail=20 || echo "No Fluent Bit logs"

  grafana-access:
    desc: "Port-forward to access Grafana UI"
    cmds:
      - echo "üåê Opening Grafana on http://localhost:3000"
      - echo "üí° Loki datasource is pre-configured at http://loki:3100"
      - kubectl port-forward svc/grafana 3000:3000 -n logging

  loki-test:
    desc: "Test Loki connectivity and show recent logs"
    cmds:
      - echo "üîç Testing Loki connectivity..."
      - kubectl port-forward svc/loki 3100:3100 -n logging &
      - sleep 5
      - curl -s http://localhost:3100/ready || echo "‚ùå Loki not ready"
      - curl -s "http://localhost:3100/loki/api/v1/labels" | jq . || echo "‚ùå Loki API not accessible"
      - pkill -f "port-forward.*3100" || true

  clean-monitoring:
    desc: "Remove monitoring stack"
    cmds:
      - helm uninstall fluent-bit -n logging --ignore-not-found
      - helm uninstall grafana -n logging --ignore-not-found
      - helm uninstall loki -n logging --ignore-not-found
      - kubectl delete namespace logging --ignore-not-found
      - echo "‚úÖ Monitoring stack removed"

  # Debugging und Testing
  test-logs:
    desc: "Generate test logs and check monitoring"
    cmds:
      - echo "üß™ Deploying test application..."
      - task: deploy-dev
      - echo "üìä Generating test traffic..."
      - kubectl port-forward svc/nginx-service 8080:80 -n dev &
      - sleep 3
      - for i in {1..20}; do curl -s http://localhost:8080/ > /dev/null; echo "Request $i sent"; sleep 1; done
      - pkill -f "port-forward.*8080" || true
      - echo "‚úÖ Test traffic generated. Check Grafana for logs!"

  setup-complete:
    desc: "Complete setup with cluster, ArgoCD, and monitoring"
    cmds:
      - task: build
      - task: deploy-argocd
      - task: monitoring
      - echo ""
      - echo "üéâ Complete setup finished!"
      - echo ""
      - echo "üì± Access Points:"
      - echo ""
      - echo "üîë Credentials:"

  clean:
    desc: "Clean up everything"
    cmds:
      - k3d cluster delete
      - rm -rf tmp/
