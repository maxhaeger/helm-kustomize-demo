version: "3"

vars:
  ARGOCD_NAMESPACE: argocd

tasks:
  build:
    desc: "Create K3D cluster with LoadBalancer port mapping"
    cmds:
      - k3d cluster create --api-port 6550 -p "8080:80@loadbalancer" --agents 2
      - echo "Cluster created successfully"

  # ArgoCD Installation
  deploy-argocd:
    desc: "Deploy ArgoCD"
    cmds:
      - "kubectl create namespace {{.ARGOCD_NAMESPACE}} --dry-run=client -o yaml | kubectl apply -f -"
      - "kubectl apply -n {{.ARGOCD_NAMESPACE}} -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
      - echo "Waiting for ArgoCD deployment to be ready..."
      - "kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n {{.ARGOCD_NAMESPACE}}"
      - 'kubectl patch svc argocd-server -n {{.ARGOCD_NAMESPACE}} --type=merge --patch="{\"spec\":{\"type\":\"LoadBalancer\"}}"'

  # Direkte Deployments (OHNE ArgoCD) mit Kustomize
  deploy-dev:
    desc: "Deploy to Development environment (Helm + Kustomize)"
    cmds:
      - helm upgrade --install nginx-demo-dev nginx-demo/
        --namespace dev
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/dev

  deploy-stage:
    desc: "Deploy to Staging environment (Helm + Kustomize)"
    cmds:
      - helm upgrade --install nginx-demo-stage nginx-demo/
        --namespace stage
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/stage

  deploy-prod:
    desc: "Deploy to Production environment (Helm + Kustomize)"
    cmds:
      - helm upgrade --install nginx-demo-prod nginx-demo/
        --namespace prod
        --create-namespace
        --set argocd.enabled=false
        --post-renderer ./kustomize-post-renderer.sh
        --post-renderer-args overlays/prod

  # ArgoCD Application Deployments (NUR Applications, keine Workloads)
  deploy-argo-dev:
    desc: "Deploy Development ArgoCD Application"
    cmds:
      - helm upgrade --install nginx-demo-dev-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-dev
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=dev
        --set argocd.syncPolicy.automated.prune=true
        --set argocd.syncPolicy.automated.selfHeal=true
      - echo "âœ… ArgoCD Application for DEV created"

  deploy-argo-stage:
    desc: "Deploy Staging ArgoCD Application"
    cmds:
      - helm upgrade --install nginx-demo-stage-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-stage
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=stage
        --set argocd.syncPolicy.automated.prune=false
        --set argocd.syncPolicy.automated.selfHeal=true
      - echo "âœ… ArgoCD Application for STAGE created"

  deploy-argo-prod:
    desc: "Deploy Production ArgoCD Application"
    cmds:
      - helm upgrade --install nginx-demo-prod-argo nginx-demo/
        --namespace argocd
        --set argocd.enabled=true
        --set argocd.appName=nginx-demo-prod
        --set argocd.source.repoURL=https://github.com/maxhaeger/helm-kustomize-demo.git
        --set argocd.source.targetRevision=master
        --set argocd.destination.namespace=prod
        --set argocd.syncPolicy.automated.prune=false
        --set argocd.syncPolicy.automated.selfHeal=false
      - echo "âœ… ArgoCD Application for PROD created"

  # GitOps Setup - NUR ArgoCD Applications erstellen
  deploy-all-argo-apps:
    desc: "Deploy ArgoCD Applications for all environments"
    cmds:
      - task: deploy-argo-dev
      - task: deploy-argo-stage
      - task: deploy-argo-prod

  # Status und Management
  argo-status:
    desc: "Check all ArgoCD applications status"
    cmds:
      - echo "=== ArgoCD Applications ==="
      - kubectl get applications -n argocd -o wide

  # Sync Operations
  sync-all:
    desc: "Sync all ArgoCD applications"
    cmds:
      - kubectl patch application nginx-demo-dev -n argocd --type=merge -p='{"operation":{"sync":{}}}'
      - kubectl patch application nginx-demo-stage -n argocd --type=merge -p='{"operation":{"sync":{}}}'
      - kubectl patch application nginx-demo-prod -n argocd --type=merge -p='{"operation":{"sync":{}}}'

  # Utilities
  publish:
    desc: "Port-forward ArgoCD UI"
    cmds:
      - "kubectl port-forward svc/argocd-server -n {{.ARGOCD_NAMESPACE}} 8081:80"

  argo-secret-copy:
    desc: "Copy ArgoCD admin password to clipboard"
    cmds:
      - 'kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d | pbcopy'
      - echo "âœ… ArgoCD admin password copied to clipboard"

  clean:
    desc: "Clean up everything"
    cmds:
      - k3d cluster delete
      - rm -rf tmp/

  # Cleanup fÃ¼r aktuelles Problem
  cleanup-argo-conflicts:
    desc: "Clean up conflicting Helm releases"
    cmds:
      - helm uninstall nginx-demo-dev-argo -n argocd --ignore-not-found
      - helm uninstall nginx-demo-stage-argo -n argocd --ignore-not-found
      - helm uninstall nginx-demo-prod-argo -n argocd --ignore-not-found
      - kubectl delete applications --all -n argocd --ignore-not-found

  # Kompletter GitOps Workflow (KORRIGIERT)
  setup-gitops:
    desc: "Complete GitOps setup"
    cmds:
      - task: build
      - task: deploy-argocd
      - echo "Waiting 30s for ArgoCD to be ready..."
      - sleep 30
      - task: deploy-all-argo-apps
      - echo ""
      - echo "âœ… GitOps Setup Complete!"
      - echo "ðŸ“‹ ArgoCD Applications created. They will sync the actual workloads."
